{"version":3,"sources":["../../../src/common/http-request/request-sender.js"],"names":["RequestSender","requestFactory","create","payloadTransformer","url","data","options","callback","mergedOptions","xhr","createRequest","error","response","fromResponse","isSuccessfulRequest","payload","toRequest","headers","send","method","sendRequest","status"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,a;;;;AACjB;;;iCAGgB;AACZ,gBAAMC,iBAAiB,yBAAeC,MAAf,EAAvB;AACA,gBAAMC,qBAAqB,6BAAmBD,MAAnB,EAA3B;;AAEA,mBAAO,IAAIF,aAAJ,CAAkBC,cAAlB,EAAkCE,kBAAlC,CAAP;AACH;;AAED;;;;;;;AAIA,2BAAYF,cAAZ,EAA4BE,kBAA5B,EAAgD;AAAA;;AAC5C;;;;AAIA,aAAKF,cAAL,GAAsBA,cAAtB;;AAEA;;;;AAIA,aAAKE,kBAAL,GAA0BA,kBAA1B;AACH;;AAED;;;;;;;;;;;oCAOYC,G,EAAKC,I,EAAMC,O,EAASC,Q,EAAU;AAAA;;AACtC,gBAAMC,gBAAgB,0BAAW,EAAX,4BAAgCF,OAAhC,CAAtB;;AAEA,gBAAMG,MAAM,KAAKR,cAAL,CAAoBS,aAApB,CAAkCN,GAAlC,EAAuCI,aAAvC,EAAsD,UAACG,KAAD,EAAW;AACzE,oBAAMC,WAAW,MAAKT,kBAAL,CAAwBU,YAAxB,CAAqCJ,GAArC,CAAjB;;AAEA,oBAAI,CAACF,QAAL,EAAe;AACX;AACH;;AAED,oBAAII,SAAS,CAAC,MAAKG,mBAAL,CAAyBL,GAAzB,CAAd,EAA6C;AACzCF,6BAASK,QAAT;AACA;AACH;;AAEDL,yBAAS,IAAT,EAAeK,QAAf;AACH,aAbW,CAAZ;;AAeA,gBAAMG,UAAU,KAAKZ,kBAAL,CAAwBa,SAAxB,CAAkCX,IAAlC,EAAwCG,cAAcS,OAAd,CAAsB,cAAtB,CAAxC,CAAhB;;AAEAR,gBAAIS,IAAJ,CAASH,OAAT;AACH;;AAED;;;;;;;;;;oCAOYX,G,EAAKC,I,EAAMC,O,EAASC,Q,EAAU;AACtC,gBAAMC,gBAAgB,4BAAa,EAAb,EAAiBF,OAAjB,EAA0B;AAC5Ca;AAD4C,aAA1B,CAAtB;;AAIA,iBAAKC,WAAL,CAAiBhB,GAAjB,EAAsBC,IAAtB,EAA4BG,aAA5B,EAA2CD,QAA3C;AACH;;AAED;;;;;;;;4CAKoBE,G,EAAK;AACrB,mBAAOA,IAAIY,MAAJ,IAAc,GAAd,IAAqBZ,IAAIY,MAAJ,GAAa,GAAzC;AACH;;;;;;kBAjFgBrB,a","file":"request-sender.js","sourcesContent":["import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n"]}