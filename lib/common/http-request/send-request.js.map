{"version":3,"sources":["../../../src/common/http-request/send-request.js"],"names":["sendRequest","getRequestBody","data","contentType","APPLICATION_JSON","JSON","stringify","getResponse","xhr","getResponseHeader","status","statusText","response","responseText","parse","isSuccessfulRequest","url","options","callback","mergedOptions","error","payload","headers","send"],"mappings":";;;;;kBAyDwBA,W;;AAzDxB;;;;AACA;;AACA;;AACA;;;;;;AAEA;;;;;;;AAOA,SAASC,cAAT,CAAwBC,IAAxB,EAA4E;AAAA,QAA9CC,WAA8C,uEAAhC,yBAAcC,gBAAkB;;AACxE,QAAIF,QAAQ,qBAASC,WAAT,EAAsB,yBAAcC,gBAApC,CAAZ,EAAmE;AAC/D,eAAOC,KAAKC,SAAL,CAAeJ,IAAf,CAAP;AACH;;AAED,WAAOA,IAAP;AACH;;AAED;;;;;;AAMA,SAASK,WAAT,CAAqBC,GAArB,EAA0B;AACtB,QAAML,cAAcK,IAAIC,iBAAJ,CAAsB,cAAtB,CAApB;AADsB,QAEdC,MAFc,GAESF,GAFT,CAEdE,MAFc;AAAA,QAENC,UAFM,GAESH,GAFT,CAENG,UAFM;;;AAItB,QAAIT,OAAO,cAAcM,GAAd,GAAoBA,IAAII,QAAxB,GAAmCJ,IAAIK,YAAlD;;AAEA,QAAIX,QAAQ,qBAASC,WAAT,EAAsB,yBAAcC,gBAApC,CAAZ,EAAmE;AAC/DF,eAAOG,KAAKS,KAAL,CAAWZ,IAAX,CAAP;AACH;;AAED,WAAO,EAAEA,UAAF,EAAQQ,cAAR,EAAgBC,sBAAhB,EAAP;AACH;;AAED;;;;;;AAMA,SAASI,mBAAT,CAA6BP,GAA7B,EAAkC;AAC9B,WAAOA,IAAIE,MAAJ,IAAc,GAAd,IAAqBF,IAAIE,MAAJ,GAAa,GAAzC;AACH;;AAED;;;;;;;;AAQe,SAASV,WAAT,CAAqBgB,GAArB,EAA0Bd,IAA1B,EAAgCe,OAAhC,EAA8D;AAAA,QAArBC,QAAqB,uEAAV,YAAM,CAAE,CAAE;;AACzE,QAAMC,gBAAgB,0BAAW,EAAX,8BAAgCF,OAAhC,CAAtB;;AAEA,QAAMT,MAAM,6BAAcQ,GAAd,EAAmBG,aAAnB,EAAkC,UAACC,KAAD,EAAW;AACrD,YAAMR,WAAWL,YAAYC,GAAZ,CAAjB;;AAEA,YAAIY,SAAS,CAACL,oBAAoBP,GAApB,CAAd,EAAwC;AACpCU,qBAASN,QAAT;;AAEA;AACH;;AAEDM,iBAAS,IAAT,EAAeN,QAAf;AACH,KAVW,CAAZ;;AAYA,QAAMS,UAAUpB,eAAeC,IAAf,EAAqBiB,cAAcG,OAAd,CAAsB,cAAtB,CAArB,CAAhB;;AAEAd,QAAIe,IAAJ,CAASF,OAAT;AACH","file":"send-request.js","sourcesContent":["import deepAssign from 'deep-assign';\nimport { CONTENT_TYPES, DEFAULT_OPTIONS } from './constants';\nimport { includes } from '../utils';\nimport createRequest from './create-request';\n\n/**\n * Get request body\n * @private\n * @param {Object} data\n * @param {string} [contentType = CONTENT_TYPES.APPLICATION_JSON]\n * @returns {Object}\n */\nfunction getRequestBody(data, contentType = CONTENT_TYPES.APPLICATION_JSON) {\n    if (data && includes(contentType, CONTENT_TYPES.APPLICATION_JSON)) {\n        return JSON.stringify(data);\n    }\n\n    return data;\n}\n\n/**\n * Get response\n * @private\n * @param {XMLHttpRequest} xhr\n * @returns {Object}\n */\nfunction getResponse(xhr) {\n    const contentType = xhr.getResponseHeader('Content-Type');\n    const { status, statusText } = xhr;\n\n    let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n    if (data && includes(contentType, CONTENT_TYPES.APPLICATION_JSON)) {\n        data = JSON.parse(data);\n    }\n\n    return { data, status, statusText };\n}\n\n/**\n * Is request successful\n * @private\n * @param {XMLHttpRequest} xhr\n * @returns {boolean}\n */\nfunction isSuccessfulRequest(xhr) {\n    return xhr.status >= 200 && xhr.status < 300;\n}\n\n/**\n * Send request\n * @param {string} url\n * @param {Object} data\n * @param {Object} [options]\n * @param {Function} [callback]\n * @returns {void}\n */\nexport default function sendRequest(url, data, options, callback = () => {}) {\n    const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n    const xhr = createRequest(url, mergedOptions, (error) => {\n        const response = getResponse(xhr);\n\n        if (error || !isSuccessfulRequest(xhr)) {\n            callback(response);\n\n            return;\n        }\n\n        callback(null, response);\n    });\n\n    const payload = getRequestBody(data, mergedOptions.headers['Content-Type']);\n\n    xhr.send(payload);\n}\n"]}