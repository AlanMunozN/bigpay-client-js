{"version":3,"sources":["../../../src/common/http-request/create-request.js"],"names":["createRequest","setHeaders","xhr","headers","headerKeys","Object","keys","forEach","key","value","setRequestHeader","setOptions","options","withCredentials","url","callback","XMLHttpRequest","onerror","Error","statusText","onload","open","method"],"mappings":";;;;;kBAuCwBA,a;AAvCxB;;;;;;;AAOA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,OAAzB,EAAkC;AAC9B,QAAMC,aAAaC,OAAOC,IAAP,CAAYH,OAAZ,CAAnB;;AAEAC,eAAWG,OAAX,CAAmB,UAACC,GAAD,EAAS;AACxB,YAAMC,QAAQN,QAAQK,GAAR,CAAd;;AAEAN,YAAIQ,gBAAJ,CAAqBF,GAArB,EAA0BC,KAA1B;AACH,KAJD;AAKH;;AAED;;;;;;;AAOA,SAASE,UAAT,CAAoBT,GAApB,EAAyBU,OAAzB,EAAkC;AAC9BV,QAAIW,eAAJ,GAAsBD,QAAQC,eAA9B;;AAEA,QAAID,QAAQT,OAAZ,EAAqB;AACjBF,mBAAWC,GAAX,EAAgBU,QAAQT,OAAxB;AACH;AACJ;;AAED;;;;;;;AAOe,SAASH,aAAT,CAAuBc,GAAvB,EAA4BF,OAA5B,EAA0D;AAAA,QAArBG,QAAqB,uEAAV,YAAM,CAAE,CAAE;;AACrE,QAAMb,MAAM,IAAIc,cAAJ,EAAZ;;AAEAd,QAAIe,OAAJ,GAAc;AAAA,eAAMF,SAAS,IAAIG,KAAJ,CAAUhB,IAAIiB,UAAd,CAAT,CAAN;AAAA,KAAd;AACAjB,QAAIkB,MAAJ,GAAa;AAAA,eAAML,UAAN;AAAA,KAAb;;AAEAb,QAAImB,IAAJ,CAAST,QAAQU,MAAjB,EAAyBR,GAAzB,EAA8B,IAA9B;AACAH,eAAWT,GAAX,EAAgBU,OAAhB;;AAEA,WAAOV,GAAP;AACH","file":"create-request.js","sourcesContent":["/**\n * Set XHR headers\n * @private\n * @param {XMLHttpRequest} xhr\n * @param {Object} headers\n * @returns {void}\n */\nfunction setHeaders(xhr, headers) {\n    const headerKeys = Object.keys(headers);\n\n    headerKeys.forEach((key) => {\n        const value = headers[key];\n\n        xhr.setRequestHeader(key, value);\n    });\n}\n\n/**\n * Set XHR options\n * @private\n * @param {XMLHttpRequest} xhr\n * @param {Object} options\n * @returns {void}\n */\nfunction setOptions(xhr, options) {\n    xhr.withCredentials = options.withCredentials;\n\n    if (options.headers) {\n        setHeaders(xhr, options.headers);\n    }\n}\n\n/**\n * Create XMLHttpRequest\n * @param {string} url\n * @param {Object} options\n * @param {Function} [callback]\n * @returns {XMLHttpRequest}\n */\nexport default function createRequest(url, options, callback = () => {}) {\n    const xhr = new XMLHttpRequest();\n\n    xhr.onerror = () => callback(new Error(xhr.statusText));\n    xhr.onload = () => callback();\n\n    xhr.open(options.method, url, true);\n    setOptions(xhr, options);\n\n    return xhr;\n}\n"]}