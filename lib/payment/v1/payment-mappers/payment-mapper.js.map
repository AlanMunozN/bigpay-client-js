{"version":3,"sources":["../../../../src/payment/v1/payment-mappers/payment-mapper.js"],"names":["PaymentMapper","paymentMethodIdMapper","create","data","order","payment","paymentMethod","quoteMeta","payload","device_info","request","deviceSessionId","gateway","mapToId","notify_url","callbackUrl","return_url","returnUrl","nonce","credit_card_token","token","credit_card","mapToCreditCard","account_name","ccName","month","ccExpiry","number","ccNumber","verification_value","ccCvv","year"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEqBA,a;;;;AACjB;;;;iCAIgB;AACZ,gBAAMC,wBAAwB,gCAAsBC,MAAtB,EAA9B;;AAEA,mBAAO,IAAIF,aAAJ,CAAkBC,qBAAlB,CAAP;AACH;;AAED;;;;;;;AAIA,2BAAYA,qBAAZ,EAAmC;AAAA;;AAC/B;;;;AAIA,aAAKA,qBAAL,GAA6BA,qBAA7B;AACH;;AAED;;;;;;;;qCAIaE,I,EAAM;AAAA,8BAC0DA,IAD1D,CACPC,KADO;AAAA,gBACPA,KADO,+BACC,EADD;AAAA,gCAC0DD,IAD1D,CACKE,OADL;AAAA,gBACKA,OADL,iCACe,EADf;AAAA,sCAC0DF,IAD1D,CACmBG,aADnB;AAAA,gBACmBA,aADnB,uCACmC,EADnC;AAAA,kCAC0DH,IAD1D,CACuCI,SADvC;AAAA,gBACuCA,SADvC,mCACmD,EADnD;;;AAGf,gBAAMC,UAAU;AACZC,6BAAaF,UAAUG,OAAV,GAAoBH,UAAUG,OAAV,CAAkBC,eAAtC,GAAwD,IADzD;AAEZC,yBAAS,KAAKX,qBAAL,CAA2BY,OAA3B,CAAmCP,aAAnC,CAFG;AAGZQ,4BAAYV,MAAMW,WAHN;AAIZC,4BAAYV,cAAcW,SAAd,KAA4Bb,MAAMC,OAAN,GAAgBD,MAAMC,OAAN,CAAcY,SAA9B,GAA0C,IAAtE;AAJA,aAAhB;;AAOA,gBAAMC,QAAQb,QAAQa,KAAR,IAAiBZ,cAAcY,KAA7C;;AAEA,gBAAIA,KAAJ,EAAW;AACP,4CAAaV,OAAb,EAAsB;AAClBW,uCAAmB;AACfC,+BAAOF;AADQ;AADD,iBAAtB;AAKH,aAND,MAMO;AACH,4CAAaV,OAAb,EAAsB;AAClBa,iCAAa,KAAKC,eAAL,CAAqBnB,IAArB;AADK,iBAAtB;AAGH;;AAED,mBAAO,oBAAQK,OAAR,CAAP;AACH;;AAED;;;;;;;;wCAKgBL,I,EAAM;AAAA,iCACOA,IADP,CACVE,OADU;AAAA,gBACVA,OADU,kCACA,EADA;;;AAGlB,mBAAO,oBAAQ;AACXkB,8BAAclB,QAAQmB,MADX;AAEXC,uBAAOpB,QAAQqB,QAAR,GAAmB,qBAASrB,QAAQqB,QAAR,CAAiBD,KAA1B,CAAnB,GAAsD,IAFlD;AAGXE,wBAAQtB,QAAQuB,QAHL;AAIXC,oCAAoBxB,QAAQyB,KAJjB;AAKXC,sBAAM1B,QAAQqB,QAAR,GAAmB,qBAASrB,QAAQqB,QAAR,CAAiBK,IAA1B,CAAnB,GAAqD;AALhD,aAAR,CAAP;AAOH;;;;;;kBArEgB/B,a","file":"payment-mapper.js","sourcesContent":["import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const { order = {}, payment = {}, paymentMethod = {}, quoteMeta = {} } = data;\n\n        const payload = {\n            device_info: quoteMeta.request ? quoteMeta.request.deviceSessionId : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n        };\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n        });\n    }\n}\n"]}