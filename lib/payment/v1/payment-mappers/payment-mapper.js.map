{"version":3,"sources":["../../../../src/payment/v1/payment-mappers/payment-mapper.js"],"names":["PaymentMapper","paymentMethodIdMapper","create","data","order","orderMeta","payment","paymentMethod","quoteMeta","payload","device_info","request","deviceSessionId","device","deviceFingerprint","fingerprint_id","gateway","mapToId","notify_url","callbackUrl","return_url","returnUrl","method","nonce","credit_card_token","token","credit_card","mapToCreditCard","account_name","ccName","month","ccExpiry","number","ccNumber","verification_value","ccCvv","year","customer_code","ccCustomerCode"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEqBA,a;;;;AACjB;;;;iCAIgB;AACZ,gBAAMC,wBAAwB,gCAAsBC,MAAtB,EAA9B;;AAEA,mBAAO,IAAIF,aAAJ,CAAkBC,qBAAlB,CAAP;AACH;;AAED;;;;;;;AAIA,2BAAYA,qBAAZ,EAAmC;AAAA;;AAC/B;;;;AAIA,aAAKA,qBAAL,GAA6BA,qBAA7B;AACH;;AAED;;;;;;;;qCAIaE,I,EAAM;AAAA,8BAOXA,IAPW,CAEXC,KAFW;AAAA,gBAEXA,KAFW,+BAEH,EAFG;AAAA,kCAOXD,IAPW,CAGXE,SAHW;AAAA,gBAGXA,SAHW,mCAGC,EAHD;AAAA,gCAOXF,IAPW,CAIXG,OAJW;AAAA,gBAIXA,OAJW,iCAID,EAJC;AAAA,sCAOXH,IAPW,CAKXI,aALW;AAAA,gBAKXA,aALW,uCAKK,EALL;AAAA,kCAOXJ,IAPW,CAMXK,SANW;AAAA,gBAMXA,SANW,mCAMC,EAND;;;AASf,gBAAMC,UAAU;AACZC,6BAAaF,UAAUG,OAAV,GAAoBH,UAAUG,OAAV,CAAkBC,eAAtC,GAAwD,IADzD;AAEZC,wBAAQR,UAAUS,iBAAV,GAA8B,EAAEC,gBAAgBV,UAAUS,iBAA5B,EAA9B,GAAgF,IAF5E;AAGZE,yBAAS,KAAKf,qBAAL,CAA2BgB,OAA3B,CAAmCV,aAAnC,CAHG;AAIZW,4BAAYd,MAAMe,WAJN;AAKZC,4BAAYb,cAAcc,SAAd,KAA4BjB,MAAME,OAAN,GAAgBF,MAAME,OAAN,CAAce,SAA9B,GAA0C,IAAtE;AALA,aAAhB;;AAQA,gBAAMC,SAAShB,QAAQgB,MAAvB;;AAEA,gBAAIA,MAAJ,EAAY;AACR,4CAAab,OAAb,EAAsB,EAAEa,cAAF,EAAtB;AACH;;AAED,gBAAMC,QAAQjB,QAAQiB,KAAR,IAAiBhB,cAAcgB,KAA7C;;AAEA,gBAAIA,KAAJ,EAAW;AACP,4CAAad,OAAb,EAAsB;AAClBe,uCAAmB;AACfC,+BAAOF;AADQ;AADD,iBAAtB;AAKH,aAND,MAMO;AACH,4CAAad,OAAb,EAAsB;AAClBiB,iCAAa,KAAKC,eAAL,CAAqBxB,IAArB;AADK,iBAAtB;AAGH;;AAED,mBAAO,oBAAQM,OAAR,CAAP;AACH;;AAED;;;;;;;;wCAKgBN,I,EAAM;AAAA,iCACOA,IADP,CACVG,OADU;AAAA,gBACVA,OADU,kCACA,EADA;;;AAGlB,mBAAO,oBAAQ;AACXsB,8BAActB,QAAQuB,MADX;AAEXC,uBAAOxB,QAAQyB,QAAR,GAAmB,qBAASzB,QAAQyB,QAAR,CAAiBD,KAA1B,CAAnB,GAAsD,IAFlD;AAGXE,wBAAQ1B,QAAQ2B,QAHL;AAIXC,oCAAoB5B,QAAQ6B,KAJjB;AAKXC,sBAAM9B,QAAQyB,QAAR,GAAmB,qBAASzB,QAAQyB,QAAR,CAAiBK,IAA1B,CAAnB,GAAqD,IALhD;AAMXC,+BAAe/B,QAAQgC;AANZ,aAAR,CAAP;AAQH;;;;;;kBAnFgBtC,a","file":"payment-mapper.js","sourcesContent":["import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n            quoteMeta = {},\n        } = data;\n\n        const payload = {\n            device_info: quoteMeta.request ? quoteMeta.request.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n        };\n\n        const method = payment.method;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n        });\n    }\n}\n"]}